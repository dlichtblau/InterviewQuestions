REF:	https://github.com/tadwhitaker/Security_Engineer_Interview_Questions/blob/master/security-interview-questions.md

Encryption and Authentication
#############################
What is a three-way handshake?	1) SYN  >>  2) SYN/ACK  >>  ACK
					2) FIN
					
	SYN = SEQUENCE-#

	1)	- Client needs to initiate the conversation by requesting a communication session with the Server
			- sends a segment/packet with: 
							a) SYN
								- informs the server about the client starting communication
								- informs the server the CLIENT_SEQUENCE-#
							
	2)	- Server responds to the client request with SYN-ACK signal set
			- ACK helps you to signify the response of segment that is received
				ACK = SYN (step_1) + 1
			- SYN signifies the SERVER_SEQUENCE-# it should use to start with the segments
			
	3)	- Client acknowledges the response of the Server via ACK
			ACK = SYN (step_2) + 1
			- Client/Server both create a stable connection and begin the actual data transfer process

How do cookies work?
	- Browser connects to a server:	*** HTTP COOKIE PART ***
		- Server "asks" the browser to "paste" a cookie with "phpsessid" in the client browser cookies folder
			- This cookie:	- Tells the server "hey I know this chap"
					- Server then grabs the session data (from /tmp/ for example) and restores the user $_SESSION
	
	- Now that we have the "phpsessid"	*** PHP LOADS SESSION STORE PART ***
		- IF: Client enters the server
			THEN:	- Browser sends the "phpsessid" to the server
				- Server takes a look at the tmp folder and if we have a match it loads back every data the user has for this client
	
	- Remains the same for a single user over different sessions (i.e. 1 COOKIE_ID : Many SESSION_IDs)	
	
How do sessions work?
	- Each user gets a SESSION ID:	- used to refer to a visitorâ€™s time browsing a web site without overloading the client's browser
		- Short-Lived
			- makes them ideal in saving temporary state between applications
			- expires once the browser is closed
		- SESSION ID is sent back to the server for validation via:	i) cookie | ii) GET variable
		
		HOW SESSION/SESSION_ID WORKS:
			1)	Server opens a session (sets a cookie via HTTP header)
			2)	Server sets a session variable.
			3)	Client changes page
			4)	Client sends all cookies to the new page, along with the session ID from step 1.
			5)	Server reads session ID from cookie.
			6)	Server matches session ID from a list in a database (or memory etc).
			7)	Server finds a match, reads variables which are now available on $_SESSION superglobal.
	 
	- More secure than cookies
		- because the variables themselves are kept on the server
			- can be stored in:	cookies, local storage session
		
	- Can be cached using fast, scalable "in-memory processing" technologies to ensure web-site delivers a responsive & personalized experience for many visitors at the same time
		- See: https://hazelcast.com/glossary/in-memory-processing/
	
Explain how OAuth/2 works:	REF:	RFC-5849  >>  https://tools.ietf.org/html/rfc5849
					RFC-6749  >> https://tools.ietf.org/html/rfc6749
					
	- AUTHORIZATION_FRAMEWORK (i.e. OAUTH1.0 = PROTOCOL) uses AUTHORIZATION_TOKENs to prove an identity between consumers and service providers (JSON)
		- instead of sharing passwords
			- Allows granular permission levels to different resources
		- AUTHORIZATION != AUTHENTICATION
		
	- OAUTH2.0
		- Uses 6_FLOWs for different types of apps and requirements
		- Enables SIGNED_SECRETs via HTTPS
			- OAuth2.0_TOKENS do not require endpoing_encryptions
	
	- COMPONENTS:	OAUTH LOVE TRIANGLE
						- User
						- Consumer		(Tinder)
						- Service Provider	(Facebook/Google)
	
	1)	- User notifies Consumer of request to provide access to Service Provider account
	2)	- Consumer seeks authorization to account from Service Provider
			- Requests REQUEST_TOKEN from Service Provider
	3)	- Service Provider responds to Consumer request with:
			- REQUEST_TOKEN
			- SECRET
				- Prevents REQUEST_FORGERY
		- Consumer will use SECRET to sign each REQUEST so the Service Provider can verify the REQUEST is truely coming from the Consumer
	
	5)	- Consumer redirects User to the Service Provider for AUTHORIZATION
			- Provides User with REQUEST_TOKEN
			
			***NOTE***:
					- This is exploitable because of a lack of encryption, signature, client verification, channel binding (i.e. binding a particular session to a client/server)
						- An outside protection protocol (i.e. TLS) must be used to provide these security features
	
		- User confirms/AUTHORIZES Consumer_REQUEST to Service Provider
		- Service Provider marks the REQUEST_TOKEN as "valid"
			- When Consumer requests access accompanied with SECRET, it will be accepted
	
	6)	- Consumer obtains ACCESS_TOKEN & SECRET from Service Provider
			***NOTE***:
					- The REQUEST_TOKEN is now an ACCESS_TOKEN
					
	7)	- Consumer now requests access to Service Provider's protected resource (i.e. user account)
			- Service Provider AUTHORIZEs access
			
	REFs:	- http://marktrapp.com/blog/2009/09/17/oauth-dummies
		- https://dev.twitter.com/docs/auth/oauth/faq
		- http://stackoverflow.com/questions/4113934/how-is-oauth-2-different-from-oauth-1
		- http://googlecodesamples.com/oauth_playground/
	
What is a public key infrastructure flow and how would I diagram it?
	- PKI COMPONENTS:
			- DIGITAL CERTIFICATES (i.e. PUBLIC KEY)
				- Like a Driver's License: Digital ID for websites/organizations
				- Ensures secure connections between communicating machines via PKI because IDs of the communicating machines is VERIFIED via certificates
				- Issued for internal communications or larger scale via: TRUSTED 3RD-PARTY ISSUER:	CA
				- Used to GENERATE & DISTRIBUTE Public Keys to select users/systems
					- The Digital Certificate will carry vital information used to identify the unique Public Key holder
				
				- Once a user is assigned a unique certificate the details incorporated into the certificate undergo a process of PKI AUTHENTICATION & PKI AUTHORIZATION
					- Certificates are verified by a number of security processes to ensure privacy of the ID and data affiliated with the certificate:
													- timestamps
													- registration
													- validation
				
			- CERTIFICATE AUTHORITY
				- Used to authenticate the Digital Certificates of users/machines
					- Verify the organization seeking the Digital Certificate & issue a Certificate based on the findings/repuation found for the Digital Certificate Issuer
						- Similar to CODE SIGNING
				- Manage the lifecycle of Digital Certificates within a system
			
			- REGISTRATION AUTHORITY
				- Authorized by the CA to provide Digital Certificates to users on a case-by-case-basis
				- All certificates requested/received/revoked by the CA & RA are stored in an encrypted DB
				- Certificate history & information is also kept in a CERTIFICATE STORE, usually kept on a specific machine and acts as a storage space for all memory relevant to the 					  certificate history
					- Including:	- Issued Certificates
							- Private Encryption Keys
					- EX: Google Wallet
	- HOW IT WORKS:
			- Uses 2 different cryptographic keys to encrypt/decrypt secure data:
								- public key
										- Available to any user connecting with the website
										- Client uses this key to encrypt/decrypt data when communicating
								- private key
										- Uniquely generated when a connection is established
										- Kept secret
										- Used by server to protect user's information from theft/tampering
										- Can only be accessed by the owner of a Digital Certificate
			- Types of encryption used:
								- Symmetric:
										- Protects the single Private Key generated upon initial exchange between communicating systems:	Digital Handshake
										- Secret Key must be passed from one system to the other for all parties involved to encrypt/decrypt exchanged data
											- Secret Key = Password
													Series of random numbers generated by a RANDOM_NUMBER_GENERATOR (i.e. RNG/PRNG)
								- Assymetric:
										- PUBLIC KEY CRYPTOGRAPHY
										- Uses 2 keys
												- Public Key:	Encryption for communicating party
												- Private Key:	Decryption for receiving party
										
	- Uses:
			- secure emails
			- secure web communications
				- retail/financial transactions
			- Digitally signed software
			- Digitally signed applications
			- Encrypting/Decrypting files
			- SMART Card Authentication
			
CRYPTOGRAPHY
	- Covers:
		- encryption
		- digital signatures
		- decryption
	- Can provide the following protections for DATA-IN-TRANSIT & DATA-AT-REST:
		- confidentiality
		- integrity
		- privacy of data
	
	- designed to optimize encryption, while making decryption without key-access nearly impossible
			
Describe the difference between synchronous and asynchronous encryption.	(REF: https://spaces.at.internet2.edu/pages/viewpage.action?pageId=50529691)
	- SYNCHRONOUS KEY ENCRYPTION:		- DATA-AT-REST
						- DIGITAL SIGNATURES
		- A type of data encryption that uses two interlocking keys such that any data that is encrypted using one key may be encoded using the other key
		- Especially useful in primitive cryptographic techniques where the sender and receiver have their own unique keys
		- Ensures authenticity and privacy as well as security of data and keys
		
		- EXAMPLE ALGOS:
				- AES
		
	- ASYNCHRONOUS KEY ENCRYPTION:	- DATA-IN-TRANSIT (i.e. Encryption/Decryption keys must be shared/exchanged)
		- 
		
Describe SSL handshake.	[REF:	https://medium.com/@kasunpdh/ssl-handshake-explained-4dabb87cdce	- See for further SUB-REFs]
	- Main purpose is to provide the following protections for secure communications between a server/client interaction:
		- Privacy
		- Data Integrity
	
	- 2 types:
		- 1-Way SSL
				- Only the client validates the identity of the server
				- Usual type used for browsing HTTPS sites
		
		- 2-Way SSL (Mutual SSL)
				- server and client will both validate the identity of each other
				- mostly used in server to server communication
	STEPS:
		1]	CLIENT HELLO
				- Client sends the information that will be required by the server to start an HTTPS CONNECTION
					
					*** ClientHello, TLSv1.2
					RandomCookie: *** ClientHello, TLSv1.2
					RandomCookie: GMT: -1892413556 bytes = { GMT: -351008774 bytes = { 169, 131, 204, 213, 154, 96, 7, 136, 43, 142, 232, 138, 148, 171, 52, 226, 155, 202, 145, 57, 										210, 132, 227, 182, 67, 222, 161, 28, 20 }
					Session ID: 239, 10, 92, 143, 185, {}
					93, Cipher Suites: [Unknown 0x8a:0x8a, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, 						TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, Unknown 0xcc:0xa9, Unknown 0xcc:0xa8, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, 						TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_GCM_SHA384, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_256_CBC_SHA, SSL_RSA_WITH_3DES_EDE_CBC_SHA]
					
		2]	SERVER HELLO
				- Server responds back to client:
					i)	Its selected configuration from the CLIENT HELLO, along with information to proceed with the handshake
					
						*** ServerHello, TLSv1.2
						RandomCookie: GMT: 1518335451 bytes = { 19, 150, 56, 42, 168, 202, 151, 43, 174, 226, 187, 53, 135, 67, 244, 170, 59, 176, 105, 150, 50, 112, 167, 83, 												192, 48, 											171, 64 }
						Session ID: {91, 128, 246, 219, 26, 93, 46, 172, 85, 212, 221, 79, 20, 186, 108, 134, 200, 239, 150, 102, 172, 24, 125, 171, 137, 53, 5, 130, 53, 228, 									2, 195}
						Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
						Compression Method: 0
						Extension renegotiation_info, renegotiated_connection: <empty>
						***
				
						- Server selects TLSv according to:
										- Lowest TLSv suggested by client in CLIENT HELLO
										- Highest TLSv supported by server
						- Server also sends back the cipher-suite it selected from the list of ciphers presented by the client
						
					ii)	Certificate of the server with the certificate chain
							- Certificate chain will be validated against the certificates in the client-trust-store
							
						** Certificate chain
						chain [0] = [
						[
						 Version: V3
						 Subject: CN=server, OU=ID, O=IBM, L=Hursley, ST=Hants, C=GB
						 Signature Algorithm: SHA256withRSA, OID = 1.2.840.113549.1.1.11

						Key: Sun RSA public key, 2048 bits
						 modulus: 17397562757879783124811507432494159361243533796048391161052829821122241422546147907779583980536886743765496985274573369668302996974964349098220930856827026983442125212118340479175872257401994146576001849503528844021528618702289642320157895787705650513758990004411195572445830613057931701313142946380207623174021376881040589912594451781207558263630010509870784494298596448861811827669869221033031956053367890915692918086795954628465637743034777850129818069833958463245749899713073673871721233098662285260745282530972322499603703844901496085490388703767606182211892402117158287170480970610942364235511256363933850852797
						 public exponent: 65537
						 Validity: [From: Sat Jul 28 09:08:48 IST 2018,
						 To: Sun Jul 28 09:08:48 IST 2019]
						 Issuer: CN=server, OU=ID, O=IBM, L=Hursley, ST=Hants, C=GB
						 SerialNumber: [ 7d834874]
						Certificate Extensions: 1
						[1]: ObjectId: 2.5.29.14 Criticality=false
						SubjectKeyIdentifier [
						KeyIdentifier [
						0000: C7 24 EA C3 1E 3E 58 8E BD E3 AE A9 17 01 00 51 .$â€¦>Xâ€¦â€¦..Q
						0010: B0 83 D4 68 â€¦h
						]
						]
						]
						 Algorithm: [SHA256withRSA]
						 Signature:
						0000: 4B FA 93 D8 56 78 05 D8 89 BC 2A 3A B6 C3 7F A5 Kâ€¦Vxâ€¦.*:â€¦.
						0010: 03 D8 56 3B E6 9F 0B 17 B5 A2 61 AE 43 46 A4 85 ..V;â€¦â€¦a.CF..
						0020: 3F 60 2E 04 41 0D C2 7A 35 0D 56 F5 FE 9D 05 51 ?`..A..z5.Vâ€¦.Q
						0030: 4A 0B BB 5B 30 ED 85 AF 1C 95 13 15 7D A0 2C DE J..[0â€¦â€¦â€¦,.
						0040: B4 A1 7A D0 5D E4 C0 91 37 C2 ED 37 39 65 7D 02 ..z.]â€¦7..79e..
						0050: B5 A4 72 FF EB 6C D5 F4 FD BC 32 FD 9F C8 3A 49 ..r..lâ€¦.2â€¦:I
						0060: 53 64 F8 C6 A0 D6 DB 89 2C 36 60 97 8B 33 8F 95 Sdâ€¦â€¦,6`..3..
						0070: 18 9C 1A F2 F8 F1 66 5E F3 0B 76 54 08 AB A9 88 â€¦â€¦f^..vTâ€¦.
						0080: 5D E9 2D 6B AE 6D 98 09 57 A0 2A 9E C6 6B 89 53 ].-k.m..W.*..k.S
						0090: 8E B3 58 C3 8D 73 C5 D3 58 2F 68 F0 4E 0A EF 29 ..X..s..X/h.N..)
						00A0: 54 95 00 34 6A C4 D2 56 22 64 05 F9 9F A4 81 44 T..4j..V"dâ€¦..D
						00B0: 44 77 95 A7 86 5A D3 EE EA 8E 06 19 ED 94 F1 83 Dwâ€¦Zâ€¦â€¦â€¦.
						00C0: F4 A1 F4 A0 76 94 02 40 30 C0 95 6A F2 4F 32 BB â€¦.v..@0..j.O2.
						00D0: 79 A2 1B 40 F5 EB 37 5B B7 0C FA 18 DE 04 18 7D y..@..7[â€¦â€¦..
						00E0: 5A 1A 95 D7 E7 00 4C 7F 3C 71 CE 8E 03 07 BD 50 Zâ€¦..L.<qâ€¦..P
						00F0: 6D 49 52 75 66 D2 CA 45 AB B8 EE B1 C2 C9 72 8A mIRuf..Eâ€¦â€¦r.
						]
						***
						
		3]	SERVER KEY EXCHANGE MESSAGE
				- Will be sent by the server to the client
					- carries the required details for the client to generate the PRE-MASTER SECRET
					***NOTE***:
							- Will not be sent if RSA Key Exchange Algo or any other key exchange algo is used which does not require the info from the server to generate a 								  PRE-MASTER-SECRET
				
				EXAMPLE FOR ELLIPTIC CURVE DIFFIE HELLMAN (ECDH)
					
					*** ECDH ServerKeyExchange
					Signature Algorithm SHA256withRSA
					Server key: Sun EC public key, 256 bits
					  public x coord: 49880139518100326927648337356136531406906846853753693344570844017045565963249
					  public y coord: 95714017526253024568876509155195989984116809887282783483716821451591048546410
					  parameters: secp256r1 [NIST P-256, X9.62 prime256v1] (1.2.840.10045.3.1.7)
					  
		4]	CERTIFICATE REQUEST
				- 1-Way SSL:
						- Authenticity of client is not validated (i.e. this step does not occur)
				- 2-Way SSL:
						- Server sends a 'ServerHelloDone' message (i.e. indicates the end of the 'ServerHello'), containing:
									- a CERTIFICATE_REQUEST from the client, with the the following:
																	- certificate-type
																	- certificate signature algos
																	- CAs supported by the server
						- Server waits for client response
		
		5]	CLIENT CERTIFICATE (i.e. See '2] SERVER HELLO 	ii)	Certificate of the server with the certificate chain')

				- Client presents its CERTIFICATE_CHAIN to the server
					- Certificate needs to be appropriate for the negotiated Cipher-Suite's Key Exchange Algo & any negotiated extensions
					
					*** Certificate chain
					chain [0] = [
					[
					 Version: V3
					 Subject: CN=client, OU=ID, O=IBM, L=Hursley, ST=Hants, C=GB
					 Signature Algorithm: SHA256withRSA, OID = 1.2.840.113549.1.1.11
					Key: Sun RSA public key, 2048 bits
					 modulus: 18119263742031194496605769187455443270597945138184373600190568567529223307881832206636149174898170318962976721473838161099154403131753987226572202408028529227618229923799372008493985299840890900724464000772003100272063510307951510774059438949182596756535864573609939013131649003265478713069926095732605709196278782011601814469262789931086208205589428797070602798907978049568830083601427658925256219608088802036407715832882313969434745397608912908804797572648755351812363722460094682723499117056761800745131355458387860695343833158680929499842492998494287303389968052301777591093565784473811706286599357517891252515661
					 public exponent: 65537
					 Validity: [From: Sat Jul 28 08:15:17 IST 2018,
					 To: Sun Jul 28 08:15:17 IST 2019]
					 Issuer: CN=client, OU=ID, O=IBM, L=Hursley, ST=Hants, C=GB
					 SerialNumber: [ 7ef725fc]
					Certificate Extensions: 1
					[1]: ObjectId: 2.5.29.14 Criticality=false
					SubjectKeyIdentifier [
					KeyIdentifier [
					0000: 97 E7 01 68 93 84 EE 2D 7D 90 5E 67 F7 55 44 86 â€¦hâ€¦-..^g.UD.
					0010: 1D 7C 1B F6 â€¦.
					]
					]
					]
					 Algorithm: [SHA256withRSA]
					 Signature:
					0000: 24 7C 86 49 7A 51 4C 30 98 A7 A4 C4 98 7D D3 3C $..IzQL0â€¦â€¦.<
					0010: 73 6D CC D8 4B 54 BA 7F F2 CE B4 C2 B5 56 CF 7C sm..KTâ€¦â€¦.V..
					0020: A8 8A 7E DD C4 F1 BE 95 A3 87 A3 2C A8 14 43 C5 â€¦â€¦â€¦..,..C.
					0030: A3 85 64 FE D2 42 BA 3D 67 18 3B FB 09 9A 14 69 ..d..B.=g.;â€¦.i
					0040: D6 ED 96 74 8F 45 89 8A 86 A8 41 39 BF 54 70 E4 â€¦t.Eâ€¦.A9.Tp.
					0050: D2 AA 9F E7 86 25 09 1A B3 62 2A 91 49 FF 9D 53 â€¦..%â€¦b*.I..S
					0060: 2B C2 DA 07 92 21 BB 41 7C 7C E8 A3 31 4B BE 5F +â€¦.!.Aâ€¦.1K._
					0070: 1B 6A 6E 05 F1 90 B8 26 5D F1 16 1C AA 2F 58 45 .jnâ€¦.&]â€¦./XE
					0080: AD 31 0E 21 29 C3 C9 C6 05 49 55 16 70 73 3A B2 .1.!)â€¦.IU.ps:.
					0090: B6 4F 5F 88 77 E2 10 03 DF 89 B8 FE D5 6D E8 98 .O_.wâ€¦â€¦..m..
					00A0: C9 26 7D 1F 28 1C 15 04 B5 84 2F 47 97 C5 B7 3C .&..(â€¦../Gâ€¦<
					00B0: B8 04 55 1B C9 54 64 55 B6 77 FC A7 E1 3B AC 7B ..U..TdU.wâ€¦;..
					00C0: 92 D4 C1 AE 80 34 2B 54 FB B2 B3 78 33 86 FD 10 â€¦..4+Tâ€¦x3â€¦
					00D0: 06 BC E8 60 EE 8F 24 74 26 8C 43 E4 49 43 55 35 â€¦`..$t&.C.ICU5
					00E0: 16 F0 F8 C5 7D 79 25 FE 67 7E FF 27 06 22 01 BA â€¦..y%.g..'."..
					00F0: F7 DE F2 0C CF 71 A8 7B 49 20 26 C9 B4 20 3E F7 â€¦..q..I &.. >.
					]
		
		6]	CLIENT KEY EXCHANGE MESSAGE
				
				- Sent by the client following the CLIENT_CERTIFICATE message (i.e. See '5] CLIENT CERTIFICATE')
				
				- 1-Way SSL:
					- Because CLIENT_CERTIFICATE is not presented (i.e. See '4]	CERTIFICATE REQUEST') this message is sent by client following reception of the ServerHelloDone msg
				- 2-Way SSL:
					- This will be where the server/client exchange common/shared SYMMETRIC KEYS
						- Use of SYMMETRIC ENCRYPTION due to higher computational/overhead costs associated with Assymetric Encryption
						
						- 2 CLIENT_KEY EXCHANGE METHODS for TLSv1.2
						
							- RSA
								- Client generates a 48-byte PRE-MASTER SECRET
								- Client encrypts this PRE-MASTER SECRET using Public-Key of the assigned Certificate
								- Client sends encrypted PRE-MASTER SECRET to the server
								- Server will use the shared Private-Key to decrypt the PRE-MASTER SECRET
							
							- DIFFIE-HELLMAN
								- DH_Parameters are transmitted to allow both client/server to generate the same PRE-MASTER SECRET
								- Both server/client will generate a MASTER-SECRET using the PRE-MASTER SECRET
								- MASTER-SECRET will be used to generate the SYMMETRIC-KEY for encryption of session data
								
		7]	FINISHED:	ENCRYPTED SSL/TLS CONNECTION COMPLETED
				
				- Following successful [AUTHENTICATION] & [PRE-MASTER SECRET | MASTER-SECRET generation] a CHANGE_CIPHER_SPEC message is sent by both server/client
					- indicates the rest of session data will be encrypted
				
				- FINISHED message will immediately follow the CHANGE_CIPHER_SPEC message
					- This is the first message in the session which is encrypted using the negotiated algos

How does HMAC work?

	***NOTE***:
			- DOES NOT ENCRYPT MESSAGE
				- Instead: the message (i.e. encrypted/decrypted) is sent alongside the HMAC_Hash, and the communicating parties with the SECRET_KEY will hash the message, again, 					  	   themselves
				
				- If authenticity of the parties is confirmed, the computed hashes from both parties will match
				
	- Keyed-Hash/Hash-Based Message Authentication Code
		- Involves:
			- cryptographic hash function
							- SHA-1, SHA-2, MD5	>>	Resulting MAC-Algo = HMAC-X
														X = SHA256
																- Operates on 512-bit blocks
																- Produces HMAC same size as the size of the hash function:	256bits
							- SHA-3	>>	Resulting MAC-Algo = HMAC-X
														X - SHA3-512
																- Produces HMAC same size as the size of the hash function:	512bits
			- Secret cryptographic key
			
	- USES:
		- IPsec
		- SSH
		- TLS
		- JWTs
	
	- Simultaneously verifies:
		- Data Integrity
		- Message Authenticity
					- uses a SHARED-SECRET/KEY
						- As opposed to DIGITAL_CERTIFICATES (i.e. Used in Assymetric Cryptography)
	
	HOW IT WORKS:
		- Uses 2 passes of hash computation
			- Provides better protection against LENGTH EXTENSION ATTACKS
		
			1a]	SECRET_KEY used to derive 2 keys
								- inner key
								- outer key
								
			1b]	1st pass of algo produces an INTERNAL_HASH
					- INTERNAL_HASH is derived from:
									- the message
									- inner key
									
				2nd pass of algo produces the FINAL_HMAC
					- FINAL_HMAC is derived from:
									- inner hash result (i.e. See 1b])
									- outer key

Why HMAC is designed in that way?
	- trades off the need for a PKI, via delegation of the KEY_EXCHANGE to communicating parties
		- communicating parties are responsible for establishing a trusted-channel to agree on the Key prior to communications
	
	- No known extension attacks have been found against the current HMAC specification which is defined as H(key âˆ¥ H(key âˆ¥ message))
		- Because the outer application of the hash function masks the intermediate result of the internal hash
	
	- Does not require SSL/TLS transport because the SECRET is never actually transmitted - the computed MAC is only exchanged (embedded in each HTTP Header)
	
	- Because the key pairs are independent of admin credentials they can be deleted or disabled when systems are compromised
		- Therefor easily disabling their use

What is the difference between authentication vs authorization name spaces?
Whatâ€™s the difference between Diffie-Hellman and RSA?
How does Kerberos work?
If you're going to compress and encrypt a file, which do you do first and why?
How do I authenticate you and know you sent the message?
Should you encrypt all data at rest?
What is Perfect Forward Secrecy?

Network Level and Logging
#########################
What are common ports involving security, what are the risks and mitigations?

	TCP Ports: 65,536 ports
	UDP Ports: 65,536 ports

	- 20/21	- FTP
	- 22		- SSH/SFTP/SCP
	- 23		- Telnet
	- 25		- SMTP (outgoing mail)
	- 53		- DNS
	- 60/61	- DHCP
	- 80		- HTTP
	- 88		- Kerberos
	- 443		- HTTPS
			- SSL VPN
	- 110		- POP3 (incoming mail)
	- 123		- NTP
	- 143		- IMAP4
	- 161		- SNMP
	- 162		- SNMP Trap
	- 389		- LDAP
	- 500		- IPsec | ISAKMP (VPN)
	- 514		- Syslog
	- 1701		- L2TP (Layer-2 Tunneling Protocol)
	- 1723		- PPTP (Point-to-Point Tunneling Protocol)
	- 3389		- RDP
			
	
Which one for DNS?
Describe HTTPs and how it is used.
What is the difference between HTTPS and SSL?
How does threat modeling work?
What is a subnet and how is it useful in security?
What is subnet mask?

	- CLASS A:	255.0.0.0
	- CLASS B:	255.255.0.0
	- CLASS C:	255.255.255.0

Explain what traceroute is.
Draw a network, then expect them to raise an issue and have to figure out where it happened.
Write out a Cisco ASA firewall configuration on the white board to allow three networks unfiltered access, 12 networks limited access to different resources on different networks, and 8 networks to be blocked altogether.
Explain TCP/IP concepts.	-	What is OSI model?

	TCP/IP	- How systems connect to internet				OSI	- Conceptual/Abstract (i.e. useful for configuring routers/switches/motherboard
		- Minimum Header-Size = 20bytes					- Minimum Header-Size = 5bytes
		1.	NETW-Iface (NIC)						1.	PHYS
		2.	NETW								2.	DLL
		3.	TRANS (TCP/UDP)						3.	NETW (defines routing standards/protocols)
		4.	APP								4.	TRANS (connection-oriented)
											5.	SESS
											6.	PRES
											7.	APP

How does a router differ from a switch?
Describe the Risk Management Framework process and a project where you successfully implemented compliance with RMF.
How does a packet travel between two hosts connected in same network?
Explain the difference between TCP and UDP.
Which is more secure and why?
What is the TCP three way handshake?
What is IPsec

	- Authenticates & Encrypts packets at NETW-Layer (IP)
	- Uses UDP TRANS-Layer protocol connections
		- bypass firewalls
	
	- IPsec is a suite of protocols, using the following protocols:
		
		- AUTHENTICATION HEADER (AH)
			- Ensures:
					- data packets are from a trusted source (authenticity)
					- data has not been tampered with (integrity)
			- not encrypted
		
		- ENCAPSULATING SECURITY PROTOCOL (ESP)
			- Encrypts the IP-Header & payload for each packet
				- unless using TRANSPORT_MODE
					- Will only encrypt the Payload
			- Adds the following to each data packet
				- its own header
				- its own trailer at the end of the payload
		
		- SECURITY ASSOCIATION (SA)
			- A number of protocols used for negotiating:
									- Encryption Keys
										- PRE-SHARED KEYS
									- Encryption Algos
										- DES:		Data Encryption Standard
										- 3DES:	Triple DES
										- AES:		Advanced Encryption Standard
									- Authentication Algos:
										- MD5:	Message Digest 5
										- SHA:	Secure Hash Algo
									
				- EXAMPLE:
					- IKE:	Internet Key Exchange
						- Typically uses x.509 PKI Certificates	(AUTHENTICATION)
						- DH Key Exchange Protocol		 	(INTEGRITY - SHARED_SECRET)
						- Authentication Algos:
									- MD5:	Message Digest 5
									- SHA:	Secure Hash Algo
						
						- Comprised of 2 Phases:
						
							- PHASE 1:	EXCHANGE PROPOSALs/PROPOSAL-SETs to Create a [SECURE] & [AUTHENTICATED] channel between 2 communicating systems
							
										- PROPOSAL:
												proposal proposal-name {
												    authentication-algorithm (hmac-md5-96 | hmac-sha-256-128 | hmac-sha-256-96 | hmac-sha-384 | 
												    			       hmac-sha-512 | hmac-sha1-96);
												    description description;
												    encryption-algorithm (3des-cbc | aes-128-cbc | aes-128-gcm | aes-192-cbc | aes-192-gcm | aes-256-cbc | 															   aes-256-gcm | des-cbc);
												    extended-sequence-number;
												    lifetime-kilobytes kilobytes; 
												    lifetime-seconds seconds;
												    protocol (ah | esp);
												}
										- PROPOSAL-SET:
												proposal-set (basic | compatible | prime-128 | prime-256 | standard | suiteb-gcm-128 | suiteb-gcm-256);
							
										SECURE
											- via DH Key-Agreement Protocol
										AUTHENTICATED
											- Supports the following methods AUTHENTICATION methods during DH Key Exchange
												- PRE-SHARED KEYS
												- RSA SIGNATURES (Digital Certificate authenticated via RSA Signature)
												- RSA Encrypted Nonces
													- Uses RSA Encryption to encrypt a nonce-value (PRNG/RNG)
								- 2 Modes:
									- Main Mode
										- Initiator and recipient send 3 two-way exchanges (six messages total) to accomplish the following services:
											- 1st exchange (messages 1 and 2):
													- Proposes and accepts the encryption and authentication algorithms
													
											- 2nd exchange (messages 3 and 4):
													- Executes a DH exchange
													- Initiator and recipient then each provide a pseudorandom number.
													
											- 3rd exchange (messages 5 and 6):
													- Sends and verifies the identities of the initiator and recipient
											
									- Aggressive Mode
										- Initiator and recipient accomplish the same objectives, but in only 2 exchanges, with a total of three messages
											- 1st message:
													- Initiator proposes the security association (SA) to recipient
													- Initiator initiates a DH exchange with recipient
													- Initiator sends recipient a pseudorandom number and its IKE identity
													
													***NOTE***:
														- Use same DH group in all proposals
															- Because DH group cannot be negotiated
														- Up to four proposals can be configured
											
											- 2nd message:
													- Recipient accepts the SA
														- authenticates the initiator
														- sends:
															- a pseudorandom number
															- its IKE identity
															- if using certificates
																- the recipient's certificate
											
											- 3rd message:
													- Initiator authenticates the recipient
														- confirms the exchange
														- if using certificates
															- sends the initiator's certificate
												
							- PHASE 2
								- Negotiates the IPsec SAs
								- Generates the required Key Materials for IPsec
								
								- Participants exchange proposals to determine which security parameters to employ in the SA (i.e. similar to PHASE-1)
									PHASE-2 PROPOSAL:
											- Includes:
													- a security protocol:
															- Encapsulating Security Payload (ESP)
															- Authentication Header (AH)
													- selected encryption and authentication algorithms
											
											- Can also specify a Diffie-Hellman (DH) group, if Perfect Forward Secrecy (PFS) is desired
											
								- 1 Mode:	QUICK MODE
										- Involves the exchange of 3 messages
										
											- 1st message:		PROXY IDs
													- Peers exchange proxy IDs
														- consists of a local and remote IP address prefix
														- must match
															- local IP specified for one peer = remote IP address specified for the other peer
													
											- 2nd message:		PFS (PERFECT FORWARD SECRECY)
													- a method for deriving Phase 2 keys, independent from and unrelated to the preceding keys
														- in PHASE 1 PROPOSAL:
															- the key specified (i.e. SKEYID_d key) is where all PHASE 2 keys come from
															- BUT:	If ATTACKER GAINS UNAUTHORIZED ACCESS
																	- THEN:	All encryption keys are now compromised
																	
															- MITIGATION: PFS
																- Forces a new DH KEY EXCHANGE for each PHASE 2 Tunnel
											
											- 3Rd message:		REPLAY PROTECTION
													- REPLAY ATTACK:
														- unauthorized person intercepts a series of packets and uses them later either to:
															- flood the system, causing a denial of service (DoS)
															- gain entry to the trusted network.

														- MITIGATION:
															- check every IPsec packet to determine if has been previously received
																- IF:	Packets arrive outside a specified sequence range
																	THEN:	REJECT/DROP


					- IKEv2
						- supports EAP AUTHENTICATION (for existing enterprise systems)
						- MOBIKE (for use with mobile platforms)
						- NAT traversal
						- determines if a tunnel is still alive to automatically re-establish a connection if necessary
						- lower bandwidth consumption
						
						- COmprised of 4 MESSAGE EXCHANGES:
							
							1. CONFIGURATION PAYLOAD:
								- Negotiate the security attributes to establish the IPsec TUnnel
									- Includes exchanging the following requirements:
																- protocols used
																- parameters used
																- DH Group
															
							2. REKEYING & REAUTHENTICATION
								- Each peer establishes/authenticates their IDs while the IPsec Tunnel is established
							
							3. FRAGMENTATION
								- Peers create addtional security associations between each other
							
							4. TRAFFIC SELECTORS
								- Peers perform LIVENESS DETECTION:
												- removing SA relationships
												- reporting error messages
								
						
					- ISAKMP:	Intenet Security Association & Key Management Protocol
						- Protocol to define how to ESTABLISH/NEGOTIATE/MODIFY/DELETE SAs
						- Typeically uses IKE for DH Key Exchange
		
		- IP

What is the difference between IPSEC Phase 1 and Phase 2?
What are biggest AWS security vulnerabilities?
How do web certificates for HTTPS work?
What is the purpose of TLS?
Is ARP UDP or TCP?
Explain what information is added to a packet at each stop of the 7 layer OSI model.
Walk through a whiteboard scenario for your environment of choice (Win/Linux) in which compromising the network is the goal without use of social engineering techniques (phishing for credential harvesting, etc).
Explain how you would build a web site that could secure communications between a client and a server and allow an authorized user to read the communications securely.
How does an active directory work?
Do you know how Single Sign-On works?
What is a firewall?
How does it work?
How does it work in cloud computing?
Difference between IPS and IDS?
How do you build a tool to protect the entire Apple infra?
How do you harden a system?
How to you elevate permissions?
Describe the hardening measures you've put on your home network.
What is traceroute? Explain it in details.
How does HTTPS work?
What would do if you discovered an infected host?
What is SYN/ACK and how does it work?
You got the memory dump of a potentially compromised system, how are you going to approach its analysis?
How would you detect a DDOS attack?
How does the kernel know which function to call for the user?
How would you go about reverse-engineering a custom protocol packet?

OWASP Top 10, Pentesting and/or Web Applications
################################################
Differentiate XSS from CSRF.
What do you do if a user brings you a pc that is acting 'weird'? You suspect malware.
What is the difference between tcp dump and FWmonitor?
Do you know what XXE is?
Explain man-in-the-middle attacks.
What is a Server Side Request Forgery attack?
Describe what are egghunters and their use in exploit development.
How is pad lock icon in browser generated?
What is Same Origin Policy and CORS?

Databases
#########
How would you secure a Mongo database?
Postgres?
Our DB was stolen/exfiltrated. It was secured with one round of sha256 with a static salt.
What do we do now?
Are we at risk?
What do we change?
What are the 6 aggregate functions of SQL?

Tools and Games
###############
Have I played CTF?
Would you decrypt a steganography image?
You're given an ip-based phone and asked me to decrypt the message in the phone.
What CND tools do you knowledge or experience with?
What is the difference between nmap -ss and nmap -st?
How would you filter xyz in Wireshark?
Given a sample packet capture - Identify the protocol, the traffic, and the likelihood of malicious intent.
If left alone in office with access to a computer, how would you exploit it?
How do you fingerprint an iPhone so you can monitor it even after wiping it?
How would you use CI/CD to improve security?
You have a pipeline for Docker images. How would you design everything to ensure the proper security checks?
How would you create a secret storage system?
What technical skill or project are you working on for fun in your free time?
How would you harden your work laptop if you needed it at Defcon?
If you had to set up supply chain attack prevention, how would you do that?

Programming and Code
####################
Code review a project and look for the vulnerability.
How would you conduct a security code review?
How can Github webhooks be used in a malicious way?
If I hand you a repo of source code to security audit whatâ€™s the first few things you would do?
Can I write a tool that would search our Github repos for secrets, keys, etc.?
Slack:	- https://arstechnica.com/security/2016/04/hacking-slack-accounts-as-easy-as-searching-github/
AWS?
Etc.
Given a CVE, walk us through it and how the solution works.
Tell me about a repetitive task at work that you automated away.
How would you analyze a suspicious email link?

Compliance
##########
Can you explain SOC 2?
What are the five trust criteria?
How is ISO27001 different?
Can you list examples of controls these frameworks require?
What is the difference between Governance, Risk and Compliance?
What does Zero Trust mean?
What is role-based access control (RBAC) and why is it covered by compliance frameworks?
What is the NIST framework and why is it influential?
What is the OSI model?
